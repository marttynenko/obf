@function reverse($list, $recursive: false) {
  $result: ();

  @for $i from length($list) * -1 through -1 {
    @if type-of(nth($list, abs($i))) == list and $recursive {
      $result: append($result, reverse(nth($list, abs($i)), $recursive));
    } @else {
      $result: append($result, nth($list, abs($i)));
    }
  }

  @return $result;
}
.inner,
.container {
	max-width: $inner;
	padding-left: $gutter;
	padding-right: $gutter;
	margin-left: auto;
	margin-right: auto;

	&-fluid {
		max-width: 100%;
		padding-left: $gutter;
		padding-right: $gutter;
	}
}

*,
::after,
::before {
  margin: 0;
  padding: 0;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.flex,
%flex {
  display: -webkit-box;
  display: -webkit-flex;
  display: -webkit-inline-box;
  display: -webkit-inline-flex;
  display: inline-flex;
  display: -ms-flex;
  display: -ms-inline-flexbox;
  display: -ms-flexbox;
  display: flex;
}
%flc,
.flex-vertical {
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
  -ms-flex-direction: column;
  flex-direction: column;
}
%jsb,
.align-justify {
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
  -ms-flex-pack: justify;
  -ms-justify-content: space-between;
  justify-content: space-between;
}
%jc,
.align-center {
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  -ms-justify-content: center;
  justify-content: center;
}
%jfs,
.align-left,
.align-start {
  -webkit-box-pack: start;
  -webkit-justify-content: flex-start;
  -ms-flex-pack: start;
  -ms-justify-content: flex-start;
  justify-content: flex-start;
}
%jfe,
.align-right,
.align-end {
  -webkit-box-pack: end;
  -webkit-justify-content: flex-end;
  -ms-flex-pack: end;
  -ms-justify-content: flex-end;
  justify-content: flex-end;
}
%aic,
.valign-center {
  -webkit-box-align: center;
  -webkit-align-items: center;
  -ms-flex-align: center;
  -ms-align-items: center;
  align-items: center;
}
%aifs,
.valign-start {
  -webkit-box-align: start;
  -webkit-align-items: flex-start;
  -ms-flex-align: start;
  -ms-align-items: flex-start;
  align-items: flex-start;
}
%aife,
.valign-end {
  -webkit-box-align: end;
  -webkit-align-items: flex-end;
  -ms-flex-align: end;
  -ms-align-items: flex-end;
  align-items: flex-end;
}
%aibsl,
.valign-baseline {
  -webkit-box-align: baseline;
  -webkit-align-items: baseline;
  -ms-flex-align: baseline;
  -ms-align-items: baseline;
  align-items: baseline;
}
.self-bottom {
  -webkit-align-self: flex-end;
  -ms-align-self: flex-end;
  align-self: flex-end;
}
.self-top {
  -webkit-align-self: flex-start;
  -ms-align-self: flex-start;
  align-self: flex-start;
}
.self-center {
  -webkit-align-self: center;
  -ms-align-self: center;
  align-self: center;
}
%flg {
  -webkit-box-flex: 1;
  -webkit-flex-grow: 1;
  -ms-flex-positive: 1;
  flex-grow: 1;
}
%flw,
.flex-wrap {
  -webkit-flex-flow: row wrap;
  -ms-flex-flow: row wrap;
  flex-flow: row wrap;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}
@mixin order($order) {
  -webkit-box-ordinal-group: $order;
  -webkit-order: $order;
  -ms-flex-order: $order;
  order: $order;
}
.row {
  margin-left: -$col_gutter;
  margin-right: -$col_gutter;
}


.inner:before,
.inner:after,
.clearfix:before,
.clearfix:after {
	content: "";
	display: table;
}
.inner:after,
.clearfix:after {
	clear: both;
}

.row {
  display: -webkit-box;
	display: -webkit-flex;
	display: -webkit-inline-box;
	display: -webkit-inline-flex;
	display: inline-flex;
	display: -ms-flex;
	display: -ms-inline-flexbox;
	display: -ms-flexbox;	
	display: flex;
  -webkit-flex-flow: row wrap;
	-ms-flex-flow: row wrap;
	flex-flow: row wrap;
	-webkit-flex-wrap: wrap;
	-ms-flex-wrap: wrap;
  flex-wrap: wrap;
  margin-left: -$col_gutter;
  margin-right: -$col_gutter;

  &-no-margin {
    margin-left: 0;
    margin-right: 0;
  }
}
[class*="col-"] {
  width: 100%;
  padding-left: $col_gutter;
  padding-right: $col_gutter;
}
// .inner, .container {
//   max-width: $inner+px;
// }

@for $i from 1 through 12 {
  .col-#{$i} {
    -ms-flex: 0 0 (100% / 12 * $i);
    flex: 0 0 (100% / 12 * $i);
    max-width: (100% / 12 * $i);
  }
  .col-offset-#{$i} {
    margin-left: (100% / 12 * $i);
  }
}

$reverseBreakpoints: reverse($breakpoints);
@each $name, $screen in $reverseBreakpoints {
  @media (min-width: #{$screen}px) {
    @for $i from 1 through 12 {
      .col-#{$name}-#{$i} {
        -ms-flex: 0 0 (100% / 12 * $i);
        flex: 0 0 (100% / 12 * $i);
        max-width: (100% / 12 * $i);
      }
      .col-#{$name}-offset-#{$i} {
        margin-left: (100% / 12 * $i);
      }
    }
    .col-#{$name}-20 {
      -ms-flex: 0 0 20%;
      flex: 0 0 20%;
      max-width: 20%;
    }
  }
}

.col-layout {
  @media (min-width: 1260px) {
    &-thin {
      flex: 0 0 25.5%;
      max-width: 25.5%;
    }
    &-wide {
      flex: 0 0 74.5%;
      max-width: 74.5%;
    }
  }
}